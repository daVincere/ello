# -*- coding: utf-8 -*-
"""Copy of HGv6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BGRjLZo-_grQT9p8N-qemPLRCoSO50UB
"""
import os
import pandas as pd
import numpy as np
from nltk.tokenize import word_tokenize
from nltk import pos_tag
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.preprocessing import LabelEncoder
from collections import defaultdict
from nltk.corpus import wordnet as wn
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn import model_selection, naive_bayes, svm
from sklearn.metrics import accuracy_score


import nltk

"""## Step 0 : Train the model (This has to be done only once)
"""

Corpus = pd.read_csv(os.getcwd() + "/training.csv",encoding='latin-1')
# Step - a : Remove blank rows if any.
Corpus['text'].dropna(inplace=True)
# Step - b : Change all the text to lower case. This is required as python interprets 'dog' and 'DOG' differently
Corpus['text'] = [entry.lower() for entry in Corpus['text']]
# Step - c : Tokenization : In this each entry in the corpus will be broken into set of words
Corpus['text']= [word_tokenize(entry) for entry in Corpus['text']]
# Step - d : Remove Stop words, Non-Numeric and perfom Word Stemming/Lemmenting.
# WordNetLemmatizer requires Pos tags to understand if the word is noun or verb or adjective etc. By default it is set to Noun
tag_map = defaultdict(lambda : wn.NOUN)
tag_map['J'] = wn.ADJ
tag_map['V'] = wn.VERB
tag_map['R'] = wn.ADV
for index,entry in enumerate(Corpus['text']):
    # Declaring Empty List to store the words that follow the rules for this step
    Final_words = []
    # Initializing WordNetLemmatizer()
    word_Lemmatized = WordNetLemmatizer()
    # pos_tag function below will provide the 'tag' i.e if the word is Noun(N) or Verb(V) or something else.
    for word, tag in pos_tag(entry):
        # Below condition is to check for Stop words and consider only alphabets
        if word not in stopwords.words('english') and word.isalpha():
            word_Final = word_Lemmatized.lemmatize(word,tag_map[tag[0]])
            Final_words.append(word_Final)
    # The final processed set of words for each iteration will be stored in 'text_final'
    Corpus.loc[index,'text_final'] = str(Final_words)

Train_X, Test_X, Train_Y, Test_Y = model_selection.train_test_split(Corpus['text_final'],Corpus['label'],test_size=0.1)

# Encoding the labels
Encoder = LabelEncoder()
Train_Y = Encoder.fit_transform(Train_Y)
Test_Y = Encoder.fit_transform(Test_Y)

#Creating word vectors

from sklearn.feature_extraction.text import CountVectorizer #for converting the document into a matrix of token counts

Tfidf_vect = TfidfVectorizer(max_features=5000)
Tfidf_vect.fit(Corpus['text_final'])
Train_X_Tfidf = Tfidf_vect.transform(Train_X)
Test_X_Tfidf = Tfidf_vect.transform(Test_X)

import joblib

SVM = svm.SVC(C=1.0, kernel='linear', degree=3, gamma='auto')
SVM.fit(Train_X_Tfidf,Train_Y)# predict the labels on validation dataset
predictions_SVM = SVM.predict(Test_X_Tfidf)# Use accuracy_score function to get the accuracy
print("SVM Accuracy Score -> ",accuracy_score(predictions_SVM, Test_Y)*100)




"""## Step 1: Emotion Detection (This has to be done everytime someone calls the /emotion API endpoint)"""

from fastai.vision import * #importing libraries
from fastai.metrics import error_rate

PATH = os.getcwd() +'/sorted_set' #insert path to sorted set in depression_project_data folder
data  = ImageDataBunch.from_folder(PATH, ds_tfms=get_transforms(), size=244, bs=16, valid_pct=0.3).normalize(imagenet_stats)

learn = cnn_learner(data, models.resnet34, metrics=accuracy)

learn.load(os.getcwd(),'/emotion') #loading trained model saved in folder with the name emotion.pth

# In the flask code, you have to first extract the blob from the request, save it as test.jpg and then open it

img = open_image('test.jpg')#insert file name whose class is to be predcited
pred_class,pred_idx,outputs = learn.predict(img)

print ("Emotion recognized", pred_class)  #Sadness or happiness




"""##Step 2 : This is called when the endpoint named /descriptive is called from the web app"""

df = pd.DataFrame({'response': str_final,
                   'ID': ['test'],
                   })

df.to_csv(os.getcwd() + '/test_id.csv',index=False) # Save the file to your project folder
df1=pd.read_csv(os.getcwd() + '/test_id.csv')
x_test= df1['response']

Tfidf_vect = TfidfVectorizer(max_features=5000)
Tfidf_vect.fit(Corpus['text_final'])
#Train_X_Tfidf = Tfidf_vect.transform(Train_X)
Test_X_Tfidf = Tfidf_vect.transform(x_test)

p = SVM.predict(Test_X_Tfidf)# Use accuracy_score function to get the accuracy
# formatting helper
if p==1:
        print(" Would you like to talk to your parents about something?")
else:  #Load the image file into memory
        print(" Have fun. Good day!")

"""## Sending a Text message to the predefined numbers via twilio API"""

#!pip install twilio>=6.0.0   # Uncomment if not installed

# For sending the SMS

# import Twilio client 
from twilio.rest import Client

# the following line needs your Twilio Account SID and Auth Token
client = Client("AC3a67725baa2d5fa25ce99f03823d4736", "370887bd22fd565a6971f9d47cc05f19")

#arr = ["+918008671407","+919899626263","+919899580611"];

print(p)
#arr.forEach(function(value){console.log(value);
# change the "from_" number to your Twilio number and the "to" number
# to the phone number you signed up for Twilio with, or upgrade your
# account to send SMS to any phone number
if p==1:#as seen in above code we are using probability of class as condition for sending text sms
 client.messages.create(to="+918008671407", 
                       from_="+12056193926", 
                       body="Can you take out time to speak to this person?")